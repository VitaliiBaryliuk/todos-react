{"version":3,"sources":["tabs/Tabs.js","tabs/Tab.js","App.js","serviceWorker.js","index.js"],"names":["Tabs","_ref","_this","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","activeTabId","onTabItemClick","bind","assertThisInitialized","setTab","value","id","setState","_this2","children","currentText","react_default","a","createElement","className","React","Children","map","child","i","cloneElement","callback","Component","Tab","onClick","title","App","tabs_Tabs","tabs_Tab","Boolean","window","location","hostname","match","ReactDOM","render","src_App_1","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQA4CeA,cAzCb,SAAAA,EAAAC,GAAqB,IAAAC,EAARC,EAAQF,EAARE,MAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACnBE,EAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMH,KAEDO,MAAQ,CACXC,YAAa,GAGfT,EAAKU,eAAiBV,EAAKU,eAAeC,KAApBT,OAAAU,EAAA,EAAAV,CAAAF,IACtBA,EAAKa,OAASb,EAAKa,OAAOF,KAAZT,OAAAU,EAAA,EAAAV,CAAAF,IARKA,8EAWNc,GACbV,KAAKS,OAAOC,kCAGPC,GACLX,KAAKY,SAAS,CACZP,YAAaM,qCAIR,IAAAE,EAAAb,KACCc,EAAad,KAAKH,MAAlBiB,SAEFC,EAAcD,EADId,KAAKI,MAArBC,aACkCR,MAAMiB,SAEhD,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACXC,IAAMC,SAASC,IAAIR,EAAU,SAACS,EAAOC,GACpC,OAAOJ,IAAMK,aAAaF,EAAO,CAC/BG,SAAU,kBAAMb,EAAKP,eAAekB,SAI1CR,EAAAC,EAAAC,cAAA,WAAMH,WApCKK,IAAMO,WCUVC,EAVF,SAAC/B,GAEV,OACEmB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAkBU,QAAS,kBAAMhC,EAAM6B,SAAS7B,EAAMa,MAAOb,EAAMiB,YAC9EjB,EAAMiC,QCeAC,mLAZX,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACc,EAAD,KACEhB,EAAAC,EAAAC,cAACe,EAAD,CAAKH,MAAM,SAAX,eACAd,EAAAC,EAAAC,cAACe,EAAD,CAAKH,MAAM,SAAX,eACAd,EAAAC,EAAAC,cAACe,EAAD,CAAKH,MAAM,SAAX,wBARQH,aCMEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a210548b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Tabs extends React.Component {\r\n  constructor({props}) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      activeTabId: 0,\r\n    }\r\n\r\n    this.onTabItemClick = this.onTabItemClick.bind(this)\r\n    this.setTab = this.setTab.bind(this)\r\n  }\r\n\r\n  onTabItemClick(value) {\r\n    this.setTab(value)\r\n  }\r\n\r\n  setTab(id) {\r\n    this.setState({\r\n      activeTabId: id, \r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { children } = this.props;\r\n    const { activeTabId } = this.state;\r\n    const currentText = children[activeTabId].props.children;\r\n\r\n    return (\r\n      <div className=\"Tabs\">\r\n        <ul className=\"Tabs__tabs-list\">\r\n          {React.Children.map(children, (child, i) => {\r\n            return React.cloneElement(child, {\r\n              callback: () => this.onTabItemClick(i)\r\n            });\r\n          })}\r\n        </ul>\r\n        <div>{currentText}</div>\r\n      </div>\r\n    );\r\n  }\r\n}  \r\n\r\nexport default Tabs;\r\n","import React from \"react\";\r\n\r\n const Tab = (props) => {\r\n   \r\n    return (\r\n      <li className=\"Tabs__tab-title\" onClick={() => props.callback(props.value, props.children)}>\r\n        {props.title}     \r\n      </li>\r\n    );\r\n  }\r\n\r\n\r\nexport default Tab;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport './App.scss'\r\nimport Tabs from './tabs/Tabs.js'\r\nimport Tab from './tabs/Tab.js'\r\n\r\nclass App extends Component {\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <Tabs>\r\n          <Tab title=\"Tab 1\">Some text 1</Tab>\r\n          <Tab title=\"Tab 2\">Some text 2</Tab>\r\n          <Tab title=\"Tab 3\">Some text 3</Tab>\r\n        </Tabs>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}