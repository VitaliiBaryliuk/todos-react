{"version":3,"sources":["todos/TodoItem.js","todos/TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","_ref","id","text","done","onCheckboxClick","react_default","a","createElement","className","onChange","type","checked","concat","TodoApp","state","todos","filtredBy","inputValue","onInputValueChenge","value","_this","setState","addNewTodosItem","event","preventDefault","newTodo","length","Object","toConsumableArray","setDone","key","_ref2","map","todo","objectSpread","leftCount","filter","this","_this2","_this$state","onSubmit","target","todos_TodoItem","onClick","setFilter","Component","App","todos_TodoApp","Boolean","window","location","hostname","match","ReactDOM","render","src_App_1","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2513f2f1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TodoItem = ({id, text, done, onCheckboxClick}) => {\r\n  return(\r\n    <label className=\"Todos__item\" onChange={() => onCheckboxClick(id)}>\r\n      <input type=\"checkbox\" checked={done} />\r\n      <span className={`Todos__item-text ${done ? 'checked' : ''}`}>{text}</span>\r\n    </label>\r\n  )\r\n}\r\n\r\nexport default TodoItem;","import React, {Component} from 'react';\r\n\r\nimport TodoItem from './TodoItem.js';\r\n\r\nclass TodoApp extends Component {\r\n  state = {\r\n    todos: [],\r\n    filtredBy: '',\r\n    inputValue: '',\r\n  }\r\n\r\n  onInputValueChenge = (value) => {\r\n    \r\n    this.setState({\r\n      inputValue: value\r\n    })\r\n  }\r\n\r\n  addNewTodosItem = (event) => {\r\n    event.preventDefault()\r\n\r\n    if (!this.state.inputValue) {\r\n      return\r\n    }\r\n\r\n    this.setState(({todos, inputValue}) => {\r\n      let newTodo = {\r\n        id: todos.length + 1,\r\n        text: inputValue,\r\n        done: false\r\n      }\r\n\r\n      return {\r\n        todos: [...todos, newTodo],\r\n        inputValue: '',\r\n      }\r\n    })\r\n  }\r\n\r\n  setDone = (key) => {\r\n\r\n    this.setState(({todos}) => {\r\n \r\n      return {\r\n        todos: todos.map(todo => {\r\n           if (todo.id === key) {\r\n             return {\r\n               ...todo,\r\n               done: !todo.done\r\n             }\r\n           }\r\n           return todo;\r\n        }),\r\n        leftCount: todos.filter(todo => todo.done === false).length\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  setFilter(filtredBy) {\r\n    \r\n    this.setState({\r\n      filtredBy\r\n    })\r\n  }\r\n\r\n\r\nrender() {\r\n  let { todos, inputValue, filtredBy } = this.state\r\n  const leftCount = this.state.todos.filter(todo => todo.done === false).length\r\n\r\n  if(filtredBy) {\r\n    if (filtredBy === 'done') {\r\n      todos = this.state.todos.filter(todo => todo.done === true)\r\n    } else if (filtredBy === 'active') {\r\n      todos = this.state.todos.filter(todo => todo.done === false)\r\n    }\r\n  }\r\n\r\n  return(\r\n    <div className=\"Todos\">\r\n      <h1 className=\"Todos__title\">Todos</h1>\r\n        <form className=\"Todos__input-wrapper\" onSubmit={(event) => this.addNewTodosItem(event)}>\r\n          <input\r\n            className=\"Todos__input\"\r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={(event) => {\r\n              this.onInputValueChenge(event.target.value)\r\n            }}\r\n          />\r\n          <button\r\n            className=\"Todos__input-button\"\r\n          >\r\n            Add\r\n          </button>\r\n        </form>\r\n      <div className=\"Todos__list\">\r\n        {todos.map( todo => \r\n          <TodoItem \r\n            key={todo.id}\r\n            text={todo.text}\r\n            done={todo.done}\r\n            id={todo.id}\r\n            onCheckboxClick={this.setDone}\r\n        />\r\n        )}\r\n      </div>\r\n      <div className=\"Todos__bottom\">\r\n        <p className=\"Todos__bottom-left-count\">{leftCount} left</p>\r\n        <button className=\"Todos__bottom-button\" onClick={() => { this.setFilter('all') }}>all</button>\r\n        <button className=\"Todos__bottom-button\" onClick={() => { this.setFilter('active') }}>Active</button>\r\n        <button className=\"Todos__bottom-button\" onClick={() => { this.setFilter('done') }}>Archived</button>\r\n      </div>\r\n    </div>\r\n  )\r\n } \r\n}\r\n\r\nexport default TodoApp;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport './App.scss';\r\nimport TodoApp from './todos/TodoApp.js';\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <TodoApp />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}