{"version":3,"sources":["tabs/Tabs.js","tabs/Tab.js","App.js","serviceWorker.js","index.js"],"names":["Tabs","props","_this","Object","classCallCheck","this","tabsArr","possibleConstructorReturn","getPrototypeOf","call","children","map","tab","index","title","text","id","state","tabs","activeTab","find","setState","_this2","tabHeaders","react_default","a","createElement","className","key","onClick","setTab","React","Component","Tab","App","tabs_Tabs","tabs_Tab","Boolean","window","location","hostname","match","ReactDOM","render","src_App_1","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAqDeA,2BAlDb,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAGjB,IAAMM,GAFNJ,EAAAC,OAAAI,EAAA,EAAAJ,CAAAE,KAAAF,OAAAK,EAAA,EAAAL,CAAAH,GAAAS,KAAAJ,KAAMJ,KAEeA,MAAMS,SAASC,IAAK,SAACC,EAAKC,GAC7C,MAAO,CACLC,MAAOF,EAAIX,MAAMa,MACjBC,KAAMH,EAAIX,MAAMS,SAChBM,GAAIH,KAPS,OAWjBX,EAAKe,MAAQ,CACXC,KAAMZ,EACNa,UAAWb,EAAQ,IAbJJ,sEAiBZY,GACL,IAAIK,EAAYd,KAAKY,MAAMC,KAAKE,KAAK,SAAAR,GAAG,OAAIA,EAAIE,QAAUA,IAE1DT,KAAKgB,SAAS,CACZF,+CAII,IAAAG,EAAAjB,KACAkB,EAAalB,KAAKY,MAAMC,KAAKP,IAAI,SAAAC,GACrC,OACEY,EAAAC,EAAAC,cAAA,MACEC,UAAU,kBACVC,IAAKhB,EAAII,GACTa,QAAS,kBAAMP,EAAKQ,OAAOlB,EAAIE,SAE9BF,EAAIE,SAIX,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACXJ,GAEHC,EAAAC,EAAAC,cAAA,WACGrB,KAAKY,MAAME,UAAUJ,cA5CbgB,IAAMC,YCUVC,mLARX,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXtB,KAAKJ,MAAMS,iBAJHqB,IAAMC,WCyBTE,mLAlBX,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACS,EAAD,KACEX,EAAAC,EAAAC,cAACU,EAAD,CAAKtB,MAAM,SAAX,eACAU,EAAAC,EAAAC,cAACU,EAAD,CAAKtB,MAAM,SAAX,eACAU,EAAAC,EAAAC,cAACU,EAAD,CAAKtB,MAAM,SAAX,gBAGFU,EAAAC,EAAAC,cAACS,EAAD,KACEX,EAAAC,EAAAC,cAACU,EAAD,CAAKtB,MAAM,SAAX,eACAU,EAAAC,EAAAC,cAACU,EAAD,CAAKtB,MAAM,SAAX,eACAU,EAAAC,EAAAC,cAACU,EAAD,CAAKtB,MAAM,SAAX,wBAdQkB,aCMEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.46fe7260.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Tabs extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    const tabsArr = this.props.children.map( (tab, index) => {\r\n      return { \r\n        title: tab.props.title,\r\n        text: tab.props.children,\r\n        id: index,\r\n      }\r\n    })\r\n\r\n    this.state = {\r\n      tabs: tabsArr,\r\n      activeTab: tabsArr[0]\r\n    }\r\n  }\r\n\r\n  setTab(title) {\r\n    let activeTab = this.state.tabs.find(tab => tab.title === title)\r\n\r\n    this.setState({\r\n      activeTab\r\n    })\r\n  }\r\n\r\n  render(){\r\n    const tabHeaders = this.state.tabs.map(tab => {\r\n      return (\r\n        <li \r\n          className=\"Tabs__tab-title\" \r\n          key={tab.id}\r\n          onClick={() => this.setTab(tab.title) }\r\n        >\r\n          {tab.title}\r\n        </li>\r\n      )\r\n    })\r\n    return (\r\n      <div className=\"Tabs\">\r\n        <ul className=\"Tabs__tabs-list\">\r\n          {tabHeaders}\r\n        </ul>\r\n        <div>\r\n          {this.state.activeTab.text}\r\n        </div>\r\n      </div>  \r\n    );\r\n  }\r\n}  \r\n\r\nexport default Tabs;","import React from \"react\";\r\n\r\nclass Tab extends React.Component {\r\n  render(){\r\n    return (\r\n      <div className=\"Tabs__tab\">\r\n        { this.props.children }      \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tab;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport './App.scss'\r\nimport Tabs from './tabs/Tabs.js'\r\nimport Tab from './tabs/Tab.js'\r\n\r\nclass App extends Component {\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <Tabs>\r\n          <Tab title=\"Tab 1\">Some text 1</Tab>\r\n          <Tab title=\"Tab 2\">Some text 2</Tab>\r\n          <Tab title=\"Tab 3\">Some text 3</Tab>\r\n        </Tabs>\r\n\r\n        <Tabs>\r\n          <Tab title=\"Tab 1\">Some text 1</Tab>\r\n          <Tab title=\"Tab 2\">Some text 2</Tab>\r\n          <Tab title=\"Tab 3\">Some text 3</Tab>\r\n        </Tabs>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}