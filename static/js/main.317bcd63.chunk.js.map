{"version":3,"sources":["todos/TodoItem.js","todos/TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","_ref","id","text","done","onCheckboxClick","react_default","a","createElement","className","type","checked","onChange","concat","TodoApp","state","todos","filtredTodos","filtredBy","inputValue","leftCount","onInputValueChenge","value","_this","setState","addNewTodosItem","newTodo","length","Object","toConsumableArray","setLeftCount","setFilter","setDone","key","_ref2","clickedItem","find","todo","_this2","this","filter","_this3","_this$state","event","target","onKeyPress","onClick","map","todos_TodoItem","Component","App","todos_TodoApp","Boolean","window","location","hostname","match","ReactDOM","render","src_App_1","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.317bcd63.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TodoItem = ({id, text, done, onCheckboxClick}) => {\r\n  return(\r\n    <li className=\"Todos__item\">\r\n      <input type=\"checkbox\" checked={done} onChange={() => onCheckboxClick(id)} />\r\n      <span className={`Todos__item-text ${done ? 'checked' : ''}`}>{text}</span>\r\n    </li> \r\n  )\r\n}\r\n\r\nexport default TodoItem;","import React, {Component} from 'react';\r\n\r\nimport TodoItem from './TodoItem.js';\r\n\r\nclass TodoApp extends Component {\r\n  state = {\r\n    todos: [],\r\n    filtredTodos: [],\r\n    filtredBy: '',\r\n    inputValue: '',\r\n    leftCount: 0,\r\n  }\r\n\r\n  onInputValueChenge = (value) => {\r\n    \r\n    this.setState({\r\n      inputValue: value\r\n    })\r\n  }\r\n\r\n  addNewTodosItem = () => {\r\n\r\n    if (!this.state.inputValue) {\r\n      return\r\n    }\r\n\r\n    this.setState(({todos, inputValue}) => {\r\n      let newTodo = {\r\n        value: todos.length + 1,\r\n        text: inputValue,\r\n        done: false\r\n      }\r\n\r\n      return {\r\n        todos: [...todos, newTodo],\r\n        inputValue: ''\r\n      }\r\n    }, () => {\r\n      this.setLeftCount()\r\n\r\n      if (this.state.filtredBy) {\r\n        this.setFilter(this.state.filtredBy);\r\n      }\r\n    });\r\n  }\r\n\r\n  setDone = (key) => {\r\n\r\n    this.setState(({todos}) => {\r\n      const clickedItem = todos.find(todo => todo.value === key)\r\n      clickedItem.done = !clickedItem.done;\r\n\r\n      return {\r\n        todos\r\n      }\r\n    }, () => {\r\n      this.setLeftCount()\r\n\r\n      if (this.state.filtredBy) {\r\n        this.setFilter(this.state.filtredBy);\r\n      }\r\n    })\r\n    \r\n  }\r\n\r\n  setLeftCount() {\r\n    this.setState(() => {\r\n      const leftCount = this.state.todos.filter(todo => todo.done === false).length\r\n      \r\n      return {\r\n        leftCount\r\n      }\r\n    })\r\n  }\r\n\r\n  setFilter(filtredBy) {\r\n    let filtredTodos = []\r\n    if (filtredBy === 'done') {\r\n      filtredTodos = this.state.todos.filter(todo => todo.done === true)\r\n    } else if (filtredBy === 'all') {\r\n      filtredBy = ''\r\n    } else {\r\n      filtredTodos = this.state.todos.filter(todo => todo.done === false)\r\n    }\r\n    \r\n    this.setState({\r\n      filtredTodos,\r\n      filtredBy\r\n    })\r\n  }\r\n\r\n\r\nrender() {\r\n  let { todos, inputValue, leftCount, filtredBy, filtredTodos } = this.state\r\n\r\n  if(filtredBy) {\r\n    todos = filtredTodos\r\n  }\r\n\r\n  return(\r\n    <div className=\"Todos\">\r\n      <h1 className=\"Todos__title\">Todos</h1>\r\n      <div className=\"Todos__input-wrapper\">\r\n        <input\r\n          className=\"Todos__input\"\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={(event) => {\r\n            this.onInputValueChenge(event.target.value)\r\n          }}\r\n          onKeyPress={key => {\r\n            if (key.key === \"Enter\") {\r\n              this.addNewTodosItem()\r\n            }\r\n          }} \r\n        />\r\n        <button\r\n          className=\"Todos__input-button\"\r\n          onClick={() => this.addNewTodosItem() }\r\n        >\r\n          Add\r\n        </button>\r\n      </div>\r\n      <div className=\"Todos__list\">\r\n        {todos.map( todo => \r\n          <TodoItem \r\n            key={todo.value}\r\n            text={todo.text}\r\n            done={todo.done}\r\n            id={todo.value}\r\n            onCheckboxClick={this.setDone}\r\n        />\r\n        )}\r\n      </div>\r\n      <div className=\"Todos__bottom\">\r\n        <p className=\"Todos__bottom-left-count\">{leftCount} left</p>\r\n        <button className=\"Todos__bottom-button\" onClick={() => { this.setFilter('all') }}>all</button>\r\n        <button className=\"Todos__bottom-button\" onClick={() => { this.setFilter('active') }}>Active</button>\r\n        <button className=\"Todos__bottom-button\" onClick={() => { this.setFilter('done') }}>Archived</button>\r\n      </div>\r\n    </div>\r\n  )\r\n } \r\n}\r\n\r\nexport default TodoApp;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport './App.scss';\nimport TodoApp from './todos/TodoApp.js';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <TodoApp />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}